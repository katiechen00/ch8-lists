lyrics.intermediate <- gsub("\r", " ", lyrics.intermediate, fixed = T )
lyrics.intermediate <- gsub("(", "", lyrics.intermediate, fixed = T )
lyrics.intermediate <- gsub(")", "", lyrics.intermediate, fixed = T )
lyrics.intermediate <- gsub("[[:punct:]]", "", lyrics.intermediate)
lyrics.intermediate <- gsub("\\[[^\\]]*\\]", "", lyrics.intermediate, perl=TRUE)
word.tokens <- unlist(strsplit(lyrics.intermediate, " "))
word.tokens <- word.tokens[word.tokens != ""]
word.tokens <- tolower(word.tokens)
return(word.tokens)
}
head(site.to.lyrics(full.links.drake[177]))
set.seed(10101)
subsample.drake <- sample(full.links.drake, 50)
complete.list.drake <- c()
for(url in subsample.drake){
complete.list.drake <- c(complete.list.drake , site.to.lyrics(url))
Sys.sleep(3)
}
complete.list.drake <- c()
for(url in subsample.drake){
complete.list.drake <- c(complete.list.drake , site.to.lyrics(url))
Sys.sleep(3)
}
complete.list.drake <- c()
for(url in subsample.drake){
complete.list.drake <- c(complete.list.drake , site.to.lyrics(url))
Sys.sleep(3)
}
complete.list.drake <- c()
for(url in subsample.drake){
complete.list.drake <- c(complete.list.drake , site.to.lyrics(url))
Sys.sleep(3)
}
complete.list.drake <- c()
for(url in subsample.drake){
complete.list.drake <- c(complete.list.drake , site.to.lyrics(url))
Sys.sleep(3)
}
word.counts.drake <- table(complete.list.drake)
head(sort(word.counts.drake, decreasing = T))
unique(complete.list.drake)
length(complete.list.drake)
length(unique(complete.list.drake))
"joint" %in% complete.list.drake
summary.statistics.drake <- rep(0, length(subsample.drake))
for(i in 1:length(subsample.drake)){
Sys.sleep(3)
song.lyrics <- site.to.lyrics(subsample.drake[i])
summary.statistics.drake[i] <- "money" %in% song.lyrics
}
summary.statistics.drake <- rep(0, length(subsample.drake))
for(i in 1:length(subsample.drake)){
Sys.sleep(3)
song.lyrics <- site.to.lyrics(subsample.drake[i])
summary.statistics.drake[i] <- "money" %in% song.lyrics
}
"money" %in% complete.list.drake
confidence.level <- .85
qnorm((1 - confidence.level) / 2)
confidence.level <- .975
qnorm((1 - confidence.level) / 2)
multiplier <- -qnorm(.15)
multiplier
multiplier <- -qnorm(.85)
multiplier
multiplier <- -qnorm(.15)
multiplier <- -qnorm(.05)
multiplier
multiplier <- -qnorm(.15)
multiplier
confidence.level <- .95
qnorm((1 - confidence.level) / 2)
confidence.level <- .90
qnorm((1 - confidence.level) / 2)
confidence.level <- .98
qnorm((1 - confidence.level) / 2)
confidence.level <- .99
qnorm((1 - confidence.level) / 2)
confidence.level <- .85
qnorm((1 - confidence.level) / 2)
confidence.level <- .68
qnorm((1 - confidence.level) / 2)
confidence.level <- .92
qnorm((1 - confidence.level) / 2)
summary.statistics.drake <- rep(0, length(subsample.drake))
subsample.drake
for(i in 1:length(subsample.drake)){
Sys.sleep(3)
song.lyrics <- site.to.lyrics(subsample.drake[i])
summary.statistics.drake[i] <- "money" %in% song.lyrics
}
summary.statistics.drake
mean(summary.statistics.drake)
23 / 50
for(i in 1:length(subsample.drake)){
Sys.sleep(3)
song.lyrics <- site.to.lyrics(subsample.drake[i])
summary.statistics.drake[i] <- length(unique(song.lyrics))
}
summary.statistics.drake
mean(summary.statistics.drake)
length(summary.statistics.drake)
sd(summary.statistics.drake)
multiplier <- -qt(.01, df = 49)
multiplier
multiplier <- -qt(.125, df = 49)
multiplier
multiplier <- -qt(.07, df = 49)
multiplier
url.meek <- "http://www.azlyrics.com/m/meekmill.html"
song.list.meek <- read_html(url.meek)
links.meek <- html_attr(html_nodes(html_nodes(song.list.meek, "#listAlbum"), "a"), "href")
links.meek <- links.meek[which(sapply(links.meek, substr, 0, 2) == "..")]
full.links.meek <- unname(sapply(links.meek, add.url))
set.seed(5555)
subsample.meek <- sample(full.links.meek, 35)
complete.list.meek <- c()
for(url in subsample.meek){
complete.list.meek <- c(complete.list.meek , site.to.lyrics(url))
Sys.sleep(3)
}
summary.statistics.meek <- rep(0, length(subsample.meek))
summary.statistics.meek
subsample.meek
for(i in 1:length(subsample.meek)){
Sys.sleep(3)
song.lyrics <- site.to.lyrics(subsample.meek[i])
summary.statistics.meek[i] <- length(unique(son.lyrics))
}
summary.statistics.meek <- rep(0, length(subsample.meek))
for(i in 1:length(subsample.meek)){
Sys.sleep(3)
song.lyrics <- site.to.lyrics(subsample.meek[i])
summary.statistics.meek[i] <- length(unique(song.lyrics))
}
summary.statistics.meek
length(summary.statistics.meek)
mean(summary.statistics.meek)
var(summary.statistics.drake)
var(summary.statistics.meek)
multiplier <- -qt(.025, df = 34)
multiplier
multiplier <- -qt(.025, df = 40)
multiplier
pt(-0.904, df = 34)
deflate <- read.csv("http://www.stat.washington.edu/~ysamwang/notes/deflategate.csv")
names(deflate)
avg.pat <- mean(deflate$PressureDrop[deflate$Team == "Patriots"])
s.pat <- sd(deflate$PressureDrop[deflate$Team == "Patriots"])
avg.colts <- mean(deflate$PressureDrop[deflate$Team == "Colts"])
s.colts <- sd(deflate$PressureDrop[deflate$Team == "Colts"])
test.stat <- (avg.pat - avg.colts) / sqrt(s.pat^2 / 11 + s.colts^2 / 4)
test.stat
pt(test.stat, df = 3)
pt(-0.904, df = 34)
pt(0.904, df = 34)
pt(-1.99, df = 40.47)
pt(1.99, df = 40.47)
qt(.05, df = 144)
qt(.05, df = 146)
qnorm(.05, df = 146)
qnorm(.05)
pnorm(-1.645)
qnorm(.06)
pnorm(-1.143)
pnorm(1.645)
pt(1.00, df = 24)
pnorm(-1.645)
pnorm(1)
1-0.8413447
pnorm(-.5)
pnorm(.01)
qnorm(.05)
qnorm(.01)
pnorm(-3.261)
pnorm(-4.938)
pnorm(-1.645)
pnorm(-3.261)
1-pnorm(-4.938)
wine <- read.csv("http://www.stat.washington.edu/~ysamwang/notes/wine.csv")
mean(wines)
pt(1.99)
names(wine)
reg.model <- lm(log(Final.Price, 10) ~ Rating.Score, data = wine)
reg.model$coeff
sse <- sum((reg.model$residual)^2)
s.reg <- sqrt(sse / (length(wine$Rating.Score) - 2))
s.reg
length(wine$Rating.Score)
se(fit) <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score) ^ 2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2)))
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score) ^ 2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2)))
se.fit
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score) ^ 2 / sum((92 - mean(wine$Rating.Score))^2)))
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (wine$Rating.Score - mean(wine$Rating.Score) ^ 2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2)))
se.fit
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score) ^ 2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2)))
se.fit
qt(.05, df = 2785)
pnorm(.29)
pnorm(-1.23)
y.hat <- -7.24223284 + 0.09473564 * 92
y.hat
predictive <- y.hat + 1.645401 * sqrt(s.reg^2 + se.fit^2)
predictive
y.hat <- -7.24223284 - 0.09473564 * 92
predictive <- y.hat - 1.645401 * sqrt(s.reg^2 + se.fit^2)
predictive
dat <- log(wine$Final.Price[which(wine$Rating.Score == 92)])
dat
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score)) ^ 2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2)))
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score)) ^ 2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2))
se.fit
predictive <- y.hat - 1.645401 * sqrt(s.reg^2 + se.fit^2)
predictive
predictive <- y.hat + 1.645401 * sqrt(s.reg^2 + se.fit^2)
predictive
qt(.05, df = 2785)
y.hat <- -7.24223284 + 0.09473564 * 92
predictive <- y.hat + 1.645401 * sqrt(s.reg^2 + se.fit^2)
predictive
predictive <- y.hat - 1.645401 * sqrt(s.reg^2 + se.fit^2)
predictive
dat <- log(wine$Final.Price[which(wine$Rating.Score == 92)], 10)
dat
dat > 1.136524
dat > 1.136524 $ dat < 1.810368
dat > 1.136524 & dat < 1.810368
mean(dat > 1.136524 & dat < 1.810368)
wine <- read.csv("http://www.stat.washington.edu/~ysamwang/notes/wine.csv")
reg.model <- lm(log(Final.Price, 10) ~ Rating.Score, data = wine)
sse <- sum((reg.model$residual)^2)
s.reg <- sqrt(sse / (length(wine$Rating.Score) - 2))
s.reg
se.fit <- s.reg * sqrt(1 / length(wine$Rating.Score) + (92 - mean(wine$Rating.Score))^2 / sum((wine$Rating.Score - mean(wine$Rating.Score))^2))
se.fit
length(wine$Rating.Score)
y.hat <- -7.242233 + 0.094736 * 92
y.hat
y.hat <- -7.242233 + 0.094736 * 92
multiplier <- qt(.05, df = length(wine$Rating.Score) - 2)
multiplier
multiplier <- -qt(.05, df = length(wine$Rating.Score) - 2)
multiplier
lower <- y.hat - multiplier * sqrt(s.reg^2 + se.fit^2)
lower
upper <- y.hat + multiplier * sqrt(s.reg^2 + se.fit^2)
upper
which(wine$Rating.Score = 92)
which(wine$Rating.Score == 92)
length(wine$Rating.Score)
data <- log(Final.Price[which(wine$Rating.Score == 92)], 10)
data <- log(wine$Final.Price[which(wine$Rating.Score == 92)], 10)
data
data > 1.136557 & data < 1.810401
mean(data > 1.136557 & data < 1.810401)
length(data)
multiplier <- pt(.025, df = length(wine$Rating.Score) - 2)
multiplier
multiplier <- qt(.025, df = length(wine$Rating.Score) - 2)
multiplier
multiplier <- -qt(.025, df = length(wine$Rating.Score) - 2)
multiplier
multiplier.confidence <- -qt(.025, df = length(wine$Rating.Score) - 2)
multiplier.confidence
multiplier
lower <- y.hat - multiplier.confidence * se.fit
lower
upper <- y.hat + multiplier.confidence * se.fit
upper
y.hat
se.fit
qt(.975, df = length(wine$Rating.Score))
mean(data >= 1.136557 & data <= 1.810401)
qt(.95, length(wine$Rating.Score))
pt(1.960816, df = length(wine$Rating.Score))
qnorm(.025)
qnorm(.05)
qt(.025, df = 73)
qt(.05, df = 73)
qt(.1, df = 9)
qt(.9, df = 9)
deflate <- read.csv("http://www.stat.washington.edu/~ysamwang/notes/deflategate.csv")
names(deflate)
avg.pat <- mean(deflate$PressureDrop[deflate$Team == "Patriots"])
s.pat <- sd(deflate$PressureDrop[deflate$Team == "Patriots"])
avg.pat <- mean(deflate$PressureDrop[deflate$Team == "Patriots"])
s.pat <- sd(deflate$PressureDrop[deflate$Team == "Patriots"])
avg.colts <- mean(deflate$PressureDrop[deflate$Team == "Colts"])
s.colts <- sd(deflate$PressureDrop[deflate$Team == "Colts"])
test.stat <- (avg.pat - avg.colts) / sqrt(s.pat^2 / 11 + s.colts^2 / 4)
test.stat
pt(test.stat, df = 3)
pnorm(-2.31)
1-pnorm(-2.31)
1-pnorm(2.31)
pt(-3.376, df = 23)
qt(.05, df = 23)
pt(-.789, df = 289)
1-pt(-.789, df = 289)
dbinorm(5, 20, .08)
dbinom(5, 20, .08)
install.packages("swirl")
library(swirl)
Ls()
ls()
rm(list=ls())
install_course("Statistical_Inference")
library(swirl)
swirl()
0.02048
0.43008
info()
0.43008
0.43
1.29024
0.69632
0.94208
pbinom(2, size=5, prob=0.8, lower.tail = FALSE)
qnorm(0.1)
-2
0
qnorm(97.5, mean=3, sd=2)
qnorm(.975, mean=3,sd=2)
1.96
1.96*2 + 3
pnorm(1200, mean = 1020, sd = 50, lower.tail = FALSE)
(1200-1020)/50
pnorm(3.6, lower.tail = FALSE)
pnorm((1200-1020)/50, lower.tail=FALSE)
qnorm(.75, mean=1020, sd=50, lower.tail=TRUE)
.53
.53
ppois(3, mean=2.5 * 4, 2.5, lower.rail=TRUE, log.p=FALSE)
ppois(3, mean=2.5 * 4)
ppois(3, 2.5)
ppois(3, 2.5 * 4)
pbinom(5, 1000, .01)
ppois(5, 10)
(5, 1000*.01)
ppois(5, 1000*.01)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
x <- 4
max_puppies <- round(1000/puppy_price)
puppy_price <- 100
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Guangzhou"
# Assign your name to the variable `my_name`
my_name <- "Katie"
# Assign your height (in inches) to a variable `my_height`
my_height <- 5.2
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 100
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- round(1000/puppy_price)
max_puppies
ten <- add_three(7)
}
}
add_three <- function(input) {
input + 3
}
ten <- add_three(7)
ten
imperial_to_metric <- function(feet, inches) {
feet/3.28
inches*0.0254
}
height_in_meters <- imperial_to_metric(5, 2)
height_in_meters
imperial_to_metric <- function(feet, inches) {
feet/3.28 + inches*0.0254
}
height_in_meters <- imperial_to_metric(5, 2)
height_in_meters
?substr
lyric <- "I like to eat apples and bananas"
intro <- substr(lyric, 1, 13)
intro
?nchar
total_letter <- nchar(lyric)
total_letter
fruits <- substr(lyric, 15, total_letter)
fruits
?gsub
fruits_e <- gsub("a", "ee", lyric)
fruits_e
fruits_o <- gsub("a", "o", lyric)
fruits_o
fruits_e <- gsub("a", "ee", fruits)
lyric_e <- paste(intro, fruits_e)
lyric_e
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
print(paste(intro, fruits_o))
fruits_o <- gsub("a", "o", fruits)
print(paste(intro, fruits_o))
my_name <- "Katie"
now_doing <- paste(my_name, "is programming!")
now_doingg
now_doing
now_doing_upper <- toupper(now_doing)
now_doing_upper
fav_1 <- 7
fav_2 <- 28
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2 / sqrt(201)
raw_sum <- sum(fav_1, fav_2)
raw_sum
round_sum <- round(raw_sum)
round_sum
round_sum <- round(raw_sum, 1)
round_sum
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
sum_round <- sum(round_1, round_2)
max(round_sum, sum_round)
sum_round
library.packages(styler)
install.packages(styler)
install.packages('styler')
install.packages("lintr")
lintr:::addin_lint()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
my_breakfast <- c("milk", "bread")
my_lunch <- c("jerk chicken")
meals <- list(my_breakfast, my_lunch)
meals$my_breakfast
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
meals$breakfast
my_breakfast <- c("milk", "bread")
meals$dinner <- c("rice", "chicken")
dinner <- meals$dinner
meals[[5]] <- meals[[lunch]]
l <- meals[[lunch]]
meals
meals[[3]]
meals[[5]] <- meals$lunch
setwd("~/Documents/INFO201/ch8-lists/exercise-1")
lintr::lint("exercise.R")
install.package("lintr")
install.packages("lintr")
install.packages("lintr")
lintr::lint("exercise.R")
styler:::style_active_file()
meals[[5]] <- meals[["lunch"]]
meals
early_meals <- meals[1:2]
early_meals
num <- lappy(meals, length)
num <- lapply(meals, length)
num
add_pizza <- function(item)
meal <- c(meals, item)
meal
add_pizza <- function(item)
meal <- c(meals, item)
return meal
add_pizza <- function(item)
meal <- c(meals, item)
return meal
end
add_pizza <- function(item) {}
meal <- c(meals, item)
meal
}
add_pizza <- function(item) {
meal <- c(meals, item)
return meal
}
add_pizza <- function(item) {
meal <- c(meals, item)
meal
}
add_pizza("pizza")
add_pizza <- function(meals) {
meal <- c(meals, "pizza")
meal
}
add_pizza(meals)
butter_meals <- add_pizza(meals)
butter_meals
point <- c(12, 3, 37, 27)
points_allowed <- c(10, 9, 18, 17)
games <- data.frame(point, points_allowed)
diff <- c(point - points_allowed)
diff
games$diff <- c(point - points_allowed)
View(games)
games$won <- c(point > points_allowed)
View(games)
opponent <- c("Dolphins", "Rams", "49ers", "Jets")
rownames(games) <- opponent
View(games)
